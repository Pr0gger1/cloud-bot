from typing import Text
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from loader import dp
from aiogram.utils import markdown as mkn
from data.database import Database
from states.StateMachine import Form
from keyboards.keyboard import keyboard_markup
import validators
import json



db = Database('database.db')

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start -- –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands='start')
async def welcome_msg(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä—Ç–∏))\n–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º–∞." 
    + "\n–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–π—Å—è —Å—Ç–∞—Ç—å–∏, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /add")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_command(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer('–î–∞, —Ö–æ–∑—è–∏–Ω, –≤—ã—Ö–æ–∂—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã', reply_markup=types.ReplyKeyboardRemove())

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add -- –º–µ—Ö–∞–Ω–∏–∑–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
@dp.message_handler(commands='add', state=None)
async def enter_link(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é...")
    await Form.Link.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Form.Link)
async def get_link(message: types.Message, state: FSMContext):
    user_link = message.text

    if validators.url(user_link) or validators.domain(user_link):
        await state.update_data(link = user_link)

        #–ü–µ—Ä–µ—Ö–æ–¥ –∫—Å–ª–µ–¥—É—é—â–µ–π –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–∏–Ω–π
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏")
        await Form.Title.set()
    else:
        await message.answer("–≠—Ç–æ –Ω–µ url-–∞–¥—Ä–µ—Å!")

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–∞ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Form.Title)
async def get_title(message: types.Message, state: FSMContext):
    user_title = message.text

    await state.update_data(title = user_title)
    await message.answer('–û–∫–µ–π, –∞ —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏')

    await Form.Tags.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Ä–µ—Å—É—Ä—Å–∞ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—É—Ä—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=Form.Tags)
async def get_tags(message: types.Message, state: FSMContext):
    user_tags = message.text.lower()
    await state.update_data(tags = user_tags)

    data = await state.get_data()

    link = data.get('link')
    title = data.get('title')
    tags = json.dumps(data.get('tags').replace(" ", "").split(','))

    user_id = message.from_user.id

    try:
        db.add_user_data(user_id, title, link, tags)
        await message.answer('–î–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—É—Ä—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')

    except Exception as e:
        await message.answer(f"–¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n{e}")

    await Form.Link.set()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search_data
@dp.message_handler(commands='search_data', state=None)
async def get_data_cmd(message: types.Message):
    await message.answer('–ü–æ –∫–∞–∫–∏–º –¥–∞–Ω–Ω—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–µ—Å—É—Ä—Å', reply_markup=keyboard_markup)
    await Form.Data_question.set()

@dp.message_handler(state=Form.Data_question)
async def get_data_q(message: types.Message):
    answer = message.text

    if answer == '–ü–æ —Ç–µ–≥–∞–º üîó':
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–µ–≥–∏ —Ä–µ—Å—É—Ä—Å–∞')
        await Form.Search_data_tags.set()

    elif answer == '–ü–æ –∑–∞–≥–æ–ª–æ–≤–∫—É üè∑':
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ—Å—É—Ä—Å–∞')
        await Form.Search_data_name.set()
    else:
        await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã')

#–ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ —Ç–µ–≥–∞–º
@dp.message_handler(state=Form.Search_data_tags)
async def get_data_for_tags(message: types.Message, state: FSMContext):
    tags = message.text.replace(' ', '').split(',')
    user_id = message.from_user.id

    query = db.search_link_for_tags(user_id)
    for data in query:
        title, link, db_tags = data[0], data[1], json.loads(data[-1])

        for tag in tags:
            if tag in json.loads(data[-1]):
                await message.answer(
                    mkn.text(
                        mkn.text('üîó' + mkn.hbold('–†–µ—Å—É—Ä—Å: '), link),
                        mkn.text('üè∑' + mkn.hbold('–ó–∞–≥–æ–ª–æ–≤–æ–∫: '), title),
                        mkn.text('üìå' + mkn.hbold('–¢–µ–≥–∏: '), db_tags),
                        sep='\n'
            )
                )#f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {data[0]}\n–†–µ—Å—É—Ä—Å: {data[1]}")
    await Form.Search_data_tags.set()

#–ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
@dp.message_handler(state=Form.Search_data_name)
async def get_data_for_name(message: types.Message, state: FSMContext):
    name = message.text
    result = db.search_link_for_name(user_id=message.from_user.id, name=name)
    for data in result:
        link, title, tags = data[0], data[1], json.loads(data[-1])

        await message.answer('–í–æ—Ç —á—Ç–æ —è —Å–º–æ–≥ –Ω–∞–π—Ç–∏')
        await message.answer(
            mkn.text(
                mkn.text('üîó' + mkn.hbold('–†–µ—Å—É—Ä—Å: '), link),
                mkn.text('üè∑' + mkn.hbold('–ó–∞–≥–æ–ª–æ–≤–æ–∫: '), title),
                mkn.text('üìå' + mkn.hbold('–¢–µ–≥–∏: '), tags),
                sep='\n'
            )
        )
    await Form.Search_data_name.set()

#–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler(commands='alldata')
async def get_all_data(message: types.Message):
    user_id = message.from_user.id
    query = db.user_query(f"SELECT * FROM '{user_id}'")

    for el in query:
        result = [el[0],el[1], json.loads(el[-1])]
        await message.answer(result)


